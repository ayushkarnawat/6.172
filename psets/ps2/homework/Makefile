# Copyright (c) 2012-2013 MIT License by 6.172 Staff
CC := clang
CFLAGS := -g -Wall -fno-omit-frame-pointer
LDFLAGS := # -lrt -lm

# The sources we're building
SOURCES = $(wildcard *.c)
HEADERS = $(wildcard *.h)

# What we're building
OBJECTS = $(patsubst %.c,%.o,$(SOURCES))
TARGET := sort

ifeq ($(DEBUG),1)
CFLAGS += -DDEBUG -Og -fsanitize=address
LDFLAGS += -fsanitize=address -lprofiler
else
CFLAGS += -O3 -DNDEBUG
endif

# By default, make the product.
all: $(TARGET)

# How to compile a C file
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

# How to link the product
$(TARGET): $(OBJECTS)
	$(CC) $(OBJECTS) $(LDFLAGS) $(EXTRA_LDFLAGS) -o $@

lint:
	python ../../../clint.py *.[ch]

# run sort on input sizes around a power of 2
SIZE=131072
run: sort
	@echo "\n\nSorting 2^17 - 1 elements"
	./sort $$(($(SIZE)-1)) 1
	@echo "\n\nSorting 2^17 elements"
	./sort ${SIZE} 1
	@echo "\n\nSorting 2^17 + 1 elements"
	./sort $$(($(SIZE)+1)) 1

small:SIZE=32
small:sort
	@echo "\n\nSorting 2^5 printed"
	./sort -p ${SIZE} 1

profile: SIZE=131072
profile: REPEAT=10
profile: sort
ifeq ($(DEBUG),1)
	dsymutil ./sort
	CPUPROFILE=sort.prof ./sort ${SIZE} ${REPEAT}
	PPROF_BINARY_PATH=./
	pprof -top sort.prof
endif

# echo $[1<<22]
huge:SIZE=262144
huge:sort
	./sort ${SIZE} 2

# stat:sort
# 	valgrind --tool=cachegrind --branch-sim=yes ./sort ${SIZE} 1

# aws_stat:sort
# 	awsrun valgrind --tool=cachegrind --branch-sim=yes ./sort ${SIZE} 1

# kcachegrind to display trace output
# callgrind:SIZE=131072
# callgrind:sort
# 	valgrind --tool=callgrind --vgdb=no  --trace-children=no -v ./sort ${SIZE} 1
# 	@echo
# 	@echo Now start kcachegrind\&

# cq_callgrind:SIZE=131072
# cq_callgrind:sort
# 	cqrun valgrind --tool=callgrind --vgdb=no  --trace-children=no -v ./sort ${SIZE} 1
# 	@echo
# 	@echo Now start kcachegrind\&

# memcheck: sort
# 	valgrind --leak-check=full  ./sort 1000 1

# pre-submit:
# 	make DEBUG=1 clean small
# 	make memcheck
# 	make clean small
# 	make memcheck

# remove all targets as well as output generated by PNQ
clean:
	rm -rf ./sort sort.dSYM/ *.o *.prof *.std* *.gcov *.gcda *.gcno default.profraw
